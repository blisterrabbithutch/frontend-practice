// Topics
- асинхронные модули
- сборка вебпак
- тс

- роутинг
- подключение препроцессора
- подключение переменных стилей и тем

- вынесение провайдера в хук для смены тем
- кондишн классы для стилизации (classNames хелпер)

- рефакторинг архитектуры на FSD
- added FSD to project. refactored routes. created absolute paths in webpack config. added aliases
- отрефакторен роутер в рамках архитектуры FSD - добавлен роутер конфиг

- добавлены shared компоненты для развития своего UI кита. типизированы.
- добавлены кастомные темы, вариации внешнего вида и состояния для shared компонентов

- кнопка переключения темы перенесена в виджет
- добавлена поддержка свг-графики и типов для TS любых файлов
- добавлен shared компонент кнопки поддерживающий разные темы и варианты отрисовки. ТИПИЗИРОВАН используя реакт типы

- добавлен сайдбар с mod условными классами для хелпера classNames


- i18n добавление
- определение isDev режима для debug режима shared модуля i18n (webpack DefinePlugin - declared ts module for dev-variable)


- webpack hot module replacement - позволяет обновить приложение после изменений в коде без перезагрузки страницы


- ESLint настройка. создание правил, выбор основного набора.

- ESLint for SCSS: Stylelint. i18next eslint. prohibited text in jsx without translation

- JEST тесты. настройка сборки (babel + TS + jest custom path). unit tests for classNames

- Router: added rule to 404 unexisting route. shared Page Loader implemented


- ErrorBoundary.

- анализ размера бандла. BundleAnalyzer

- React Testing Library: Тесты компонентов. Добавлены абсолютные импорты в окружение Jest. Настроено окружение Jest - пути, scss

- Storybook - настройка. адаптирован к тс, абс путям, цсс модулям, работе с свг.настройка абсолютного импорта в окружении storybook. Storybook decorators - для избавления от импорта css-переменных в каждый сторис styleDecorator
- ThemeDecorator для storybook - для тем. применение декоратора темы для варианта компонента баттон.
- добавление поддержки svg в окружении Storybook. Создание декоратора для роутов для навбар - RouteDecorator
- созданы стори для баттон сайдбар и навбар.
- создан сторис под ErrorPage. 
- создан сторис под AppLink, Loader, ThemeSwitcher
- создан сторис под AboutPage, MainPage, NotFoundPage

- Loki - скриншотные тесты - регрессионное тестирование. новый функционал не сломал старый. сравнивает верстку со старой существующий на момент создания снепшота.

- CI Pipeline. Script actions before commits
- добавили CI пайплайн для организации проверки пайплайном скриптом при работе в сайдбренчах.


- дописан сайдбар. 
- добавлены CI пайплайн для параллельного запуска команд чтобы не последовательно запускались команды (если одна упадет - дальше не пойдет проверка пайплайна)
- добавлен универсальный враппер для тестов оборачивающий все компоненты
- Screenshot UI TEST REPORT - test:ui:report

-- РАБОТА С ДАННЫМИ

- REACT PORTAL: created modal with states as shared component - создано через портал.
- настроен линтер для поддержки использования хуков в функциональных компонентах
- fix ThemeProvider, ThemeDecorator


- подключен Redux ToolKit. добавлена обертка стора для сторибук и тестов - StoreProvider
- Базовый пример - создаются src/entities под каждую сущность - Counter. Типизирован.
- покрытие unit-тестами Redux селекторов: getCounter через DeepPartial, getCounterValue
- unit-тесты на reducer в counterSlice -> decrement, increment.
- Написан Компонентный тест использующий стор Redux и проверяющий верстку


- фикс для стилей модального окна.
- Работа с данными. JSON Server. Создание простой авторизации к локальному серверу с бд.


- Создана сущность User для RTK. добавлен в общий StateSchema. объединение редьюсеров в общий.
- создание feature для взаимодействия слоев -> authByUsername
- модальное окно формы авторизации + сторибук
- компонент Input + сторибук


- Husky как замена GitHub Actions - precommit actions


- Создание Формы Авторизации - loginSlice RTK - feature authByUsername. 
- подключение асинхронного редюсера. 
- Async Thunk - Создание асинхронного экшна. (model/services/loginByUsername) 
- интеграция в форму авторизации готовой связки + автоматическая авторизация через локалСторадж
- Создание shared Text компонента.
- StoreDecorator для сторибук - для отрисовки компонента через стейт
- __IS_DEV__ прокидываем из вебпак в сторибук


- оптимизация бандла. асинхронный LoginForm - bundleAnalyzer итоговый бандл делим на асинхронные. Компонент вынесли. Вынесен код редьюсера LoginForm в его асинхронный чанк - Code Splitting -> ReducerManager.ts
- т.е. в момент монтирования компонента добавляется его редьюсер и стор, при демонтировании удаляем (ОПЦИОНАЛЬНО)
- вынесена логика добавления редьюсера в переиспользуемый компонент (shared/lib/components/DynamicModuleLoader)
- добавлена поддержка асинхронных редьюсеров для сторибук в StoreDecorator


- тесты для авторизации RTK - features/AuthByUsername -> loginByUsername. имитация запроса на сервер для теста.
- создание модуля TestAsyncFunc - для теста запросов. 


- Sidebar refactoring -> SidebarItem separated
- проверка onSuccess на успешный логин.
- страница настроек ProfilePage. 
- memo - 90% оборачиваем компонентов. НЕЛЬЗЯ оборачивать компоненты с children. мемо кидаем на Input -> иначе перерисовываются ВСЕ инпуты на странице
- new Entity RTK -> Profile 
- создан асинхронный стейт profile только при открытии страницы


- создание общего shared инстанса Axios 
- middleware конфиг для store RTK
- переписан features/AuthByUsername/loginByUsername через работу с общим конфигом Axios
- добавление navigate в extra миддлверы стора чтобы менять роуты при работе с редьюсером
- глобальная переменная __API__ добавлена во все окружения - вебпак, тесты, сторибук. (as __IS_DEV__)

- фиксы типов strict mode, Redux



- ProfilePage Form
- рефакторинг карточки профиля в целях масштабирования колва карточек (рендер по пропсам)
- обработка ошибок (неудачного запроса) на уровне компонента ProfileCard
- фичи формы - сохранить, редактировать, удалить.
- работа с edit inputs (есть текущее значение в стейте и редактированное)
- updateProfileData PUT request
- created shared Avatar + stories
- создание Select shared компонента + stories
- создание приватных роутов



- Создание валидации -> services/validateProfileData и возврат из хелпера кода в массив ошибки ENUM в момент updateProfileData
- рендер валидационных ошибок в компоненте ProfilePage
- маппинг через ENUM словаря ошибок по статусу кода
- сторис на карточку ProfileCard
- !разделение сред выполнения кода - storybook, frontend, jest: через DefinePlugin глобальную переменную.
- выполняем запрос только в окружении frontend. 
- unit тесты - getProfileData, getProfileError. fetchProfileData (validateProfileData), updateProfileData (default state assign to test case). extra reducer testing.


- МУЛЬТИТЕМЫ - добавление третьей темы
- NPM concurrently: одновременный запуск сервер + клиент
- HotModuleReplacementPlugin fix: react-refresh


- Private routes realization as nested component RequireAuth. _init flag to use with async routes



- создание приватных ArticlePage
- создание приватных ArticleDetailsPage
- изменение конфига webpack для поддержки nested routes async - publicPath: '/'
- редирект из articles single page на главную



- создание записей на бэке под разные сущности статьи
- полностью типизирована структура Article
- инкапсуляция ArticleDetails
- создание entity - Article. selectors, services (requests), slice, types
- создание shared Skeleton
- при переходе в Article идет загрузка во время запроса со статусом скелетона контента
- обертка для всех иконок для цвета темы Icon


- модуль комментариев для ArticlePage: entity Comment.
- Comments - нормализация данных - относимся к данным в стейте как к базе данных. комменты самостоятельны но крепятся к артиклю.
- serice/fetchArticleById



- other profiles view feature.
- clickable comments lead to another profiles.
- addCommentForm RTK entity. Component AddCommentForm
- post new comment request - sendComment
- запрет редактирования чужого профиля
- добавлены сторибук комментарии



- sidebar new feature -> created new selector достаем авторизованного пользователя.




- page articles list. 
- change view from cards to list
- ArticleList, ArticleListItem components
- кастомный хук useHover для статуса ховера через js



- RTK Pages -> ArticlesPage создание стейта
- переход с article list -> article single
- реализация смены режима отображения карточек article




- Infinite scroll for articles.
- создание универсального Page
- useInfiniteScroll хук для отслеживания скролла по рефу
- fetchNextArticlePage
- тест на бесконечный скролл



- рефакторинг стора чтобы избежать лишнего перерендера Articles и фетча при переходе с сингл на лист



- сохранение и восстановление позиций скролла в ArticleList через стор
- троттлинг изменения стора при скролле useThrottle


- добавлена сортировка и фильтры по типу, дате и тематике Article для запроса
- useDebounce хук
- в гет запрос пушатся квери параметры для фильтров - addQueryParams
- фильтрация на загрузку страницы с квери параметрами
- created shared Tabs



- getArticleRecommendations
- инжект 2 сразу редьюсеров для страницы Articles



- fetchArticleRecommendations
- список рекомендаций





- темплейт - редактирование статьи создателем.




- публикация netlify.
- билд переводов - copy webpack plugin CopyPlugin




- Виртуализация ArticleList -> react-virtualized (аналоги новые - react-window, react-virtuozo)




- Abstract Syntax Tree. own linter rules lib preset.




- кастомная UI библиотека компонентов - Flex. покрывает все задачи дизайн системы. не требует дальнейшего создания цсс.



- semantic refactoring for Text.



- Headless UI lib. Range Slider. Custom Select Dropdown. Floating UI - implementing of dropdown, tooltip position





- Headless UI -> Menu dropdown. 




- RTK Query запросы. Рефакторинг. Кеширует запросы. Асинхронные запросы-хуки которые не увеличивают размер основного бандла.
- RTK Query API axios. 
- рефакторинг ArticleList - features
- страницы теперь наборы features



- js report in html format for testing.





! массив, объект ВНЕ компонента - не будет делать перерендер


// cmds
npm run start
npx webpack
npm run unit
npm run build:dev

юи тест - 
npm run test:ui:report
npm run test:ui:ok


// FSD архитектура подготовка.

classic:
pages
components
helpers
api

fsd слои:
app -> providers, errorBoundary, context etc
*processes
pages -> widgets + features
widgets -> features
features -> entities
entities -> user, post, comment -> ui, model, api
shared - из одного проекта можно перекинуть в другой.

каждый слой состоит из слайсов
каждый слайс из сегментов